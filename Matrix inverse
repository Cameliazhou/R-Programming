## create a special object that stores a numeric vector and cache's its mean

## 	1.	set the value of the vector 2. get the value of the vector 3. set the value of the mean 4. get the value of the mean

makeCacheMatrix <- function(x = matrix()) {
	m <- NULL
+     set <- function(y) {
+       x <<- y
+       m <<- NULL
+     }
+     get <- function() x
+     setinverse <- function(solve) m <<- inverse
+     getinverse <- function() m
+     list(set = set, get = get,
+          setminverse = setinverse,
+          getinverse = getinverse)

}


## it first checks to see if the inverse has already been calculated. If so, it gets the inverse from the cache and skips the computation. Otherwise, it calculates the inverse of the data and sets the value of the inverse in the cache via the setmean function.
cacheSolve <- function(x, ...) {
       if(!is.null(m)) {
+         message("getting cached data")
+         return(m)
+     }
+     data <- x$get()
+     m <- solve(data, ...)
+     x$setsolve(m)
+     m
}

echo "# R-programming" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Cameliazhou/R-programming.git
git push -u origin master
